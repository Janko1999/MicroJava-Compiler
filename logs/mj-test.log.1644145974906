INFO  00:27:01,660 - Compiling source file: D:\ETF\sedmiSemestar\PP1\Jflex\Izvorni kod\MJCompiler\test\program.mj
INFO  00:27:01,697 - #2 program
INFO  00:27:01,697 - #3 p
INFO  00:27:01,697 - #6 const
INFO  00:27:01,697 - #3 int
INFO  00:27:01,697 - #3 size
INFO  00:27:01,698 - #11 =
INFO  00:27:01,698 - #10 10
INFO  00:27:01,698 - #18 ;
INFO  00:27:01,699 - #14 class
INFO  00:27:01,699 - #3 Table
INFO  00:27:01,699 - #16 {
INFO  00:27:01,699 - #3 int
INFO  00:27:01,699 - #3 pos
INFO  00:27:01,699 - #12 [
INFO  00:27:01,699 - #13 ]
INFO  00:27:01,699 - #7 ,
INFO  00:27:01,700 - #3 neg
INFO  00:27:01,700 - #12 [
INFO  00:27:01,700 - #13 ]
INFO  00:27:01,700 - #18 ;
INFO  00:27:01,701 - #16 {
INFO  00:27:01,701 - #3 int
INFO  00:27:01,702 - #3 getp
INFO  00:27:01,702 - #4 (
INFO  00:27:01,702 - #3 int
INFO  00:27:01,702 - #3 idx
INFO  00:27:01,702 - #5 )
INFO  00:27:01,702 - #16 {
INFO  00:27:01,703 - #26 return
INFO  00:27:01,703 - #3 pos
INFO  00:27:01,703 - #12 [
INFO  00:27:01,703 - #3 idx
INFO  00:27:01,703 - #13 ]
INFO  00:27:01,704 - #18 ;
INFO  00:27:01,704 - #17 }
INFO  00:27:01,705 - #3 int
INFO  00:27:01,705 - #3 getn
INFO  00:27:01,705 - #4 (
INFO  00:27:01,705 - #3 int
INFO  00:27:01,705 - #3 idx
INFO  00:27:01,705 - #5 )
INFO  00:27:01,705 - #16 {
INFO  00:27:01,705 - #26 return
INFO  00:27:01,705 - #3 neg
INFO  00:27:01,705 - #12 [
INFO  00:27:01,706 - #3 idx
INFO  00:27:01,706 - #13 ]
INFO  00:27:01,706 - #18 ;
INFO  00:27:01,706 - #17 }
INFO  00:27:01,706 - #17 }
INFO  00:27:01,706 - #17 }
INFO  00:27:01,707 - #19 record
INFO  00:27:01,707 - #3 Board
INFO  00:27:01,707 - #16 {
INFO  00:27:01,707 - #3 int
INFO  00:27:01,707 - #3 rows
INFO  00:27:01,707 - #7 ,
INFO  00:27:01,708 - #3 columns
INFO  00:27:01,708 - #18 ;
INFO  00:27:01,708 - #17 }
INFO  00:27:01,708 - #3 Table
INFO  00:27:01,708 - #3 val
INFO  00:27:01,708 - #18 ;
INFO  00:27:01,708 - #3 Board
INFO  00:27:01,708 - #3 board
INFO  00:27:01,708 - #18 ;
INFO  00:27:01,708 - #16 {
INFO  00:27:01,712 - #20 void
INFO  00:27:01,712 - #3 f
INFO  00:27:01,712 - #4 (
INFO  00:27:01,712 - #3 char
INFO  00:27:01,712 - #3 ch
INFO  00:27:01,712 - #7 ,
INFO  00:27:01,712 - #3 int
INFO  00:27:01,712 - #3 a
INFO  00:27:01,712 - #7 ,
INFO  00:27:01,712 - #3 int
INFO  00:27:01,712 - #3 arg
INFO  00:27:01,712 - #5 )
INFO  00:27:01,712 - #3 int
INFO  00:27:01,712 - #3 x
INFO  00:27:01,712 - #18 ;
INFO  00:27:01,712 - #16 {
INFO  00:27:01,712 - #3 x
INFO  00:27:01,712 - #11 =
INFO  00:27:01,712 - #3 arg
INFO  00:27:01,713 - #18 ;
INFO  00:27:01,713 - #17 }
INFO  00:27:01,714 - #20 void
INFO  00:27:01,714 - #3 main
INFO  00:27:01,714 - #4 (
INFO  00:27:01,714 - #5 )
INFO  00:27:01,714 - #3 int
INFO  00:27:01,714 - #3 x
INFO  00:27:01,714 - #7 ,
INFO  00:27:01,714 - #3 i
INFO  00:27:01,714 - #18 ;
INFO  00:27:01,715 - #3 char
INFO  00:27:01,715 - #3 c
INFO  00:27:01,715 - #18 ;
INFO  00:27:01,715 - #16 {
INFO  00:27:01,715 - #3 val
INFO  00:27:01,715 - #11 =
INFO  00:27:01,715 - #39 new
INFO  00:27:01,715 - #3 Table
INFO  00:27:01,715 - #18 ;
INFO  00:27:01,715 - #3 val
INFO  00:27:01,715 - #40 .
INFO  00:27:01,715 - #3 pos
INFO  00:27:01,715 - #11 =
INFO  00:27:01,716 - #39 new
INFO  00:27:01,716 - #3 int
INFO  00:27:01,716 - #12 [
INFO  00:27:01,716 - #3 size
INFO  00:27:01,716 - #13 ]
INFO  00:27:01,716 - #18 ;
INFO  00:27:01,716 - #3 val
INFO  00:27:01,716 - #40 .
INFO  00:27:01,716 - #3 neg
INFO  00:27:01,717 - #11 =
INFO  00:27:01,717 - #39 new
INFO  00:27:01,717 - #3 int
INFO  00:27:01,717 - #12 [
INFO  00:27:01,717 - #3 size
INFO  00:27:01,717 - #13 ]
INFO  00:27:01,717 - #18 ;
INFO  00:27:01,717 - #27 read
INFO  00:27:01,717 - #4 (
INFO  00:27:01,717 - #3 x
INFO  00:27:01,717 - #5 )
INFO  00:27:01,717 - #18 ;
INFO  00:27:01,717 - #47 if
ERROR 00:27:01,717 - 
Sintaksna greska na liniji 28
ERROR 00:27:01,718 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 28
